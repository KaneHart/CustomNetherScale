buildscript {
    repositories {
        //mavenCentral()
		maven {
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        
        maven {
              name 'OpenMods Third Party'
              url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.7.10-1.0"
group = "ru.windcorp.cns.piwcs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "custom-nether-scale"

sourceCompatibility=1.8
targetCompatibility=1.8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
	if (file('../run').exists()) { 
		runDir = "../run"
	} else {
		runDir = "eclipse"
	}
}

dependencies {
	compile project(":OpenModsLib") // Load OpenModsLib from submodule
}

minecraft {
	replaceIn 'ru/windcorp/piwcs/cns/CNSMod.java'
    replace '$VERSION$', project.version
    replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes("FMLCorePlugin": "ru.windcorp.piwcs.cns.CNSCorePlugin", "FMLCorePluginContainsFMLMod": "true")
    }
}
